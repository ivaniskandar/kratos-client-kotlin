/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.kratos.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import sh.ory.kratos.models.CourierMessageStatus
import sh.ory.kratos.models.ErrorGeneric
import sh.ory.kratos.models.Message

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import sh.ory.kratos.infrastructure.ApiClient
import sh.ory.kratos.infrastructure.ApiResponse
import sh.ory.kratos.infrastructure.ClientException
import sh.ory.kratos.infrastructure.ClientError
import sh.ory.kratos.infrastructure.ServerException
import sh.ory.kratos.infrastructure.ServerError
import sh.ory.kratos.infrastructure.MultiValueMap
import sh.ory.kratos.infrastructure.PartConfig
import sh.ory.kratos.infrastructure.RequestConfig
import sh.ory.kratos.infrastructure.RequestMethod
import sh.ory.kratos.infrastructure.ResponseType
import sh.ory.kratos.infrastructure.Success
import sh.ory.kratos.infrastructure.toMultiValue

class CourierApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Get a Message
     * Gets a specific messages by the given ID.
     * @param id MessageID is the ID of the message.
     * @return Message
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getCourierMessage(id: kotlin.String) : Message = withContext(Dispatchers.IO) {
        val localVarResponse = getCourierMessageWithHttpInfo(id = id)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Message
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get a Message
     * Gets a specific messages by the given ID.
     * @param id MessageID is the ID of the message.
     * @return ApiResponse<Message?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getCourierMessageWithHttpInfo(id: kotlin.String) : ApiResponse<Message?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getCourierMessageRequestConfig(id = id)

        return@withContext request<Unit, Message>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCourierMessage
     *
     * @param id MessageID is the ID of the message.
     * @return RequestConfig
     */
    fun getCourierMessageRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/admin/courier/messages/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List Messages
     * Lists all messages by given status and recipient.
     * @param pageSize Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250L)
     * @param pageToken Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional)
     * @param status Status filters out messages based on status. If no value is provided, it doesn&#39;t take effect on filter. (optional)
     * @param recipient Recipient filters out messages based on recipient. If no value is provided, it doesn&#39;t take effect on filter. (optional)
     * @return kotlin.collections.List<Message>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listCourierMessages(pageSize: kotlin.Long? = 250L, pageToken: kotlin.String? = null, status: CourierMessageStatus? = null, recipient: kotlin.String? = null) : kotlin.collections.List<Message> = withContext(Dispatchers.IO) {
        val localVarResponse = listCourierMessagesWithHttpInfo(pageSize = pageSize, pageToken = pageToken, status = status, recipient = recipient)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Message>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List Messages
     * Lists all messages by given status and recipient.
     * @param pageSize Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250L)
     * @param pageToken Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional)
     * @param status Status filters out messages based on status. If no value is provided, it doesn&#39;t take effect on filter. (optional)
     * @param recipient Recipient filters out messages based on recipient. If no value is provided, it doesn&#39;t take effect on filter. (optional)
     * @return ApiResponse<kotlin.collections.List<Message>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun listCourierMessagesWithHttpInfo(pageSize: kotlin.Long?, pageToken: kotlin.String?, status: CourierMessageStatus?, recipient: kotlin.String?) : ApiResponse<kotlin.collections.List<Message>?> = withContext(Dispatchers.IO) {
        val localVariableConfig = listCourierMessagesRequestConfig(pageSize = pageSize, pageToken = pageToken, status = status, recipient = recipient)

        return@withContext request<Unit, kotlin.collections.List<Message>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listCourierMessages
     *
     * @param pageSize Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250L)
     * @param pageToken Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional)
     * @param status Status filters out messages based on status. If no value is provided, it doesn&#39;t take effect on filter. (optional)
     * @param recipient Recipient filters out messages based on recipient. If no value is provided, it doesn&#39;t take effect on filter. (optional)
     * @return RequestConfig
     */
    fun listCourierMessagesRequestConfig(pageSize: kotlin.Long?, pageToken: kotlin.String?, status: CourierMessageStatus?, recipient: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (pageToken != null) {
                    put("page_token", listOf(pageToken.toString()))
                }
                if (status != null) {
                    put("status", listOf(status.toString()))
                }
                if (recipient != null) {
                    put("recipient", listOf(recipient.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/admin/courier/messages",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
