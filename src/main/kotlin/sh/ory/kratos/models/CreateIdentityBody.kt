/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.kratos.models

import sh.ory.kratos.models.IdentityWithCredentials
import sh.ory.kratos.models.RecoveryIdentityAddress
import sh.ory.kratos.models.VerifiableIdentityAddress

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual
import kotlinx.serialization.json.JsonObject

/**
 * Create Identity Body
 *
 * @param schemaId SchemaID is the ID of the JSON Schema to be used for validating the identity's traits.
 * @param traits Traits represent an identity's traits. The identity is able to create, modify, and delete traits in a self-service manner. The input will always be validated against the JSON Schema defined in `schema_url`.
 * @param credentials 
 * @param metadataAdmin Store metadata about the user which is only accessible through admin APIs such as `GET /admin/identities/<id>`.
 * @param metadataPublic Store metadata about the identity which the identity itself can see when calling for example the session endpoint. Do not store sensitive information (e.g. credit score) about the identity in this field.
 * @param recoveryAddresses RecoveryAddresses contains all the addresses that can be used to recover an identity.  Use this structure to import recovery addresses for an identity. Please keep in mind that the address needs to be represented in the Identity Schema or this field will be overwritten on the next identity update.
 * @param state State is the identity's state. active StateActive inactive StateInactive
 * @param verifiableAddresses VerifiableAddresses contains all the addresses that can be verified by the user.  Use this structure to import verified addresses for an identity. Please keep in mind that the address needs to be represented in the Identity Schema or this field will be overwritten on the next identity update.
 */
@Serializable

data class CreateIdentityBody (

    /* SchemaID is the ID of the JSON Schema to be used for validating the identity's traits. */
    @SerialName(value = "schema_id")
    val schemaId: kotlin.String,

    /* Traits represent an identity's traits. The identity is able to create, modify, and delete traits in a self-service manner. The input will always be validated against the JSON Schema defined in `schema_url`. */
    @Contextual @SerialName(value = "traits")
    val traits: JsonObject,

    @SerialName(value = "credentials")
    val credentials: IdentityWithCredentials? = null,

    /* Store metadata about the user which is only accessible through admin APIs such as `GET /admin/identities/<id>`. */
    @Contextual @SerialName(value = "metadata_admin")
    val metadataAdmin: JsonObject? = null,

    /* Store metadata about the identity which the identity itself can see when calling for example the session endpoint. Do not store sensitive information (e.g. credit score) about the identity in this field. */
    @Contextual @SerialName(value = "metadata_public")
    val metadataPublic: JsonObject? = null,

    /* RecoveryAddresses contains all the addresses that can be used to recover an identity.  Use this structure to import recovery addresses for an identity. Please keep in mind that the address needs to be represented in the Identity Schema or this field will be overwritten on the next identity update. */
    @SerialName(value = "recovery_addresses")
    val recoveryAddresses: kotlin.collections.List<RecoveryIdentityAddress>? = null,

    /* State is the identity's state. active StateActive inactive StateInactive */
    @SerialName(value = "state")
    val state: CreateIdentityBody.State? = null,

    /* VerifiableAddresses contains all the addresses that can be verified by the user.  Use this structure to import verified addresses for an identity. Please keep in mind that the address needs to be represented in the Identity Schema or this field will be overwritten on the next identity update. */
    @SerialName(value = "verifiable_addresses")
    val verifiableAddresses: kotlin.collections.List<VerifiableIdentityAddress>? = null

) {

    /**
     * State is the identity's state. active StateActive inactive StateInactive
     *
     * Values: ACTIVE,INACTIVE
     */
    @Serializable
    enum class State(val value: kotlin.String) {
        @SerialName(value = "active") ACTIVE("active"),
        @SerialName(value = "inactive") INACTIVE("inactive");
    }

}

