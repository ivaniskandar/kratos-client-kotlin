/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package sh.ory.kratos.models

import sh.ory.kratos.models.ContinueWith
import sh.ory.kratos.models.Identity
import sh.ory.kratos.models.UiContainer

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual
import kotlinx.serialization.json.JsonObject

/**
 * This flow is used when an identity wants to update settings (e.g. profile data, passwords, ...) in a selfservice manner.  We recommend reading the [User Settings Documentation](../self-service/flows/user-settings)
 *
 * @param expiresAt ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to update the setting, a new flow has to be initiated.
 * @param id ID represents the flow's unique ID. When performing the settings flow, this represents the id in the settings ui's query parameter: http://<selfservice.flows.settings.ui_url>?flow=<id>
 * @param identity 
 * @param issuedAt IssuedAt is the time (UTC) when the flow occurred.
 * @param requestUrl RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL's path or query for example.
 * @param state State represents the state of this flow. It knows two states:  show_form: No user data has been collected, or it is invalid, and thus the form should be shown. success: Indicates that the settings flow has been updated successfully with the provided data. Done will stay true when repeatedly checking. If set to true, done will revert back to false only when a flow with invalid (e.g. \"please use a valid phone number\") data was sent.
 * @param type The flow type can either be `api` or `browser`.
 * @param ui 
 * @param active Active, if set, contains the registration method that is being used. It is initially not set.
 * @param continueWith Contains a list of actions, that could follow this flow  It can, for example, contain a reference to the verification flow, created as part of the user's registration.
 * @param returnTo ReturnTo contains the requested return_to URL.
 * @param transientPayload TransientPayload is used to pass data from the settings flow to hooks and email templates
 */
@Serializable

data class SettingsFlow (

    /* ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to update the setting, a new flow has to be initiated. */
    @Contextual @SerialName(value = "expires_at")
    val expiresAt: kotlinx.datetime.Instant,

    /* ID represents the flow's unique ID. When performing the settings flow, this represents the id in the settings ui's query parameter: http://<selfservice.flows.settings.ui_url>?flow=<id> */
    @SerialName(value = "id")
    val id: kotlin.String,

    @SerialName(value = "identity")
    val identity: Identity,

    /* IssuedAt is the time (UTC) when the flow occurred. */
    @Contextual @SerialName(value = "issued_at")
    val issuedAt: kotlinx.datetime.Instant,

    /* RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL's path or query for example. */
    @SerialName(value = "request_url")
    val requestUrl: kotlin.String,

    /* State represents the state of this flow. It knows two states:  show_form: No user data has been collected, or it is invalid, and thus the form should be shown. success: Indicates that the settings flow has been updated successfully with the provided data. Done will stay true when repeatedly checking. If set to true, done will revert back to false only when a flow with invalid (e.g. \"please use a valid phone number\") data was sent. */
    @Contextual @SerialName(value = "state")
    val state: SettingsFlowState?,

    /* The flow type can either be `api` or `browser`. */
    @SerialName(value = "type")
    val type: kotlin.String,

    @SerialName(value = "ui")
    val ui: UiContainer,

    /* Active, if set, contains the registration method that is being used. It is initially not set. */
    @SerialName(value = "active")
    val active: kotlin.String? = null,

    /* Contains a list of actions, that could follow this flow  It can, for example, contain a reference to the verification flow, created as part of the user's registration. */
    @SerialName(value = "continue_with")
    val continueWith: kotlin.collections.List<ContinueWith>? = null,

    /* ReturnTo contains the requested return_to URL. */
    @SerialName(value = "return_to")
    val returnTo: kotlin.String? = null,

    /* TransientPayload is used to pass data from the settings flow to hooks and email templates */
    @Contextual @SerialName(value = "transient_payload")
    val transientPayload: JsonObject? = null

) {


}

